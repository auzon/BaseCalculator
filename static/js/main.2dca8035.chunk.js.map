{"version":3,"sources":["components/BinaryInput.js","components/DecimalInput.js","components/HexInput.js","components/App.js","reportWebVitals.js","index.js"],"names":["BinaryInput","decimal","baseValue","updateBaseValue","Form","Group","Label","Control","type","placeholder","value","toString","onInput","e","givenInput","target","calculatedDecimal","parseInt","changeHandler","DecimalInput","valueAsNumber","HexInput","App","useState","setBaseValue","Container","className","Jumbotron","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAsBeA,EApBK,SAAC,GAAkC,IAO5BC,EAPLC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,gBAY/B,OACE,eAACC,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,qBACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,SAASC,YAAY,sBAAsBC,OARzCT,EAQgEC,EAPlED,EAAUA,EAAQU,SAAS,GAAK,IAO8CC,QAAS,SAACC,GAAD,OAdxF,SAACA,GACrB,IAAMC,EAAaD,EAAEE,OAAOL,MACtBM,EAAoBC,SAASH,EAAY,GAC/CX,EAAgBa,GAWmGE,CAAcL,UCStHM,EAxBM,SAAC,GAAoC,IAAlChB,EAAiC,EAAjCA,gBAAiBD,EAAgB,EAAhBA,UAWvC,OACE,eAACE,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,sBACA,cAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,SACLC,YAAY,uBACZC,MAViBR,EAAYA,EAAUS,SAAS,IAAM,GAWtDC,QAAS,SAACC,GAAD,OAjBO,SAACA,GACrB,IAAMC,EAAaD,EAAEE,OAAOK,cAC5BjB,EAAgBW,GAeII,CAAcL,UCOvBQ,EAzBE,SAAC,GAAoC,IAO9BpB,EAPJC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,gBAY7B,OACE,eAACC,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,0BACA,cAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,OACLC,YAAY,2BACZC,OAXgBT,EAWIC,EAVND,EAAUA,EAAQU,SAAS,IAAM,IAW/CC,QAAS,SAACC,GAAD,OAlBO,SAACA,GACrB,IAAMC,EAAaD,EAAEE,OAAOL,MACtBM,EAAoBC,SAASH,EAAY,IAC/CX,EAAgBa,GAeIE,CAAcL,UCIvBS,MAnBf,WACE,MAAkCC,qBAAlC,mBAAOrB,EAAP,KAAkBsB,EAAlB,KAEMrB,EAAkB,SAACO,GACvBc,EAAad,IAGf,OACE,cAACe,EAAA,EAAD,CAAWC,UAAU,OAArB,SACE,eAACC,EAAA,EAAD,WACE,iDACA,cAAC,EAAD,CAAczB,UAAWA,EAAWC,gBAAiBA,IACrD,cAAC,EAAD,CAAaD,UAAWA,EAAWC,gBAAiBA,IACpD,cAAC,EAAD,CAAUD,UAAWA,EAAWC,gBAAiBA,UCP1CyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2dca8035.chunk.js","sourcesContent":["import { Form } from \"react-bootstrap\";\r\n\r\nconst BinaryInput = ({baseValue, updateBaseValue}) => {\r\n  const changeHandler = (e) => {\r\n    const givenInput = e.target.value;\r\n    const calculatedDecimal = parseInt(givenInput, 2);\r\n    updateBaseValue(calculatedDecimal);\r\n  }\r\n  \r\n  const calculateBinary = (decimal) => {\r\n    const stringBinary = decimal ? decimal.toString(2) : \"\";\r\n    return stringBinary;\r\n  }\r\n\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>Binary</Form.Label>\r\n      <Form.Control type=\"number\" placeholder=\"Enter binary number\" value={calculateBinary(baseValue)} onInput={(e) => changeHandler(e)}/>\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nexport default BinaryInput;\r\n","import { Form } from \"react-bootstrap\";\r\n\r\nconst DecimalInput = ({ updateBaseValue, baseValue }) => {\r\n  const changeHandler = (e) => {\r\n    const givenInput = e.target.valueAsNumber;\r\n    updateBaseValue(givenInput);\r\n  };\r\n\r\n  const toStr = () => {\r\n    const strBaseValue = baseValue ? baseValue.toString(10) : \"\";\r\n    return strBaseValue;\r\n  };\r\n\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>Decimal</Form.Label>\r\n      <Form.Control\r\n        type=\"number\"\r\n        placeholder=\"Enter decimal number\"\r\n        value={toStr()}\r\n        onInput={(e) => changeHandler(e)}\r\n      />\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nexport default DecimalInput;\r\n","import { Form } from \"react-bootstrap\";\r\n\r\nconst HexInput = ({ baseValue, updateBaseValue }) => {\r\n  const changeHandler = (e) => {\r\n    const givenInput = e.target.value;\r\n    const calculatedDecimal = parseInt(givenInput, 16);\r\n    updateBaseValue(calculatedDecimal);\r\n  };\r\n\r\n  const calculateHex = (decimal) => {\r\n    const stringHex = decimal ? decimal.toString(16) : \"\";\r\n    return stringHex;\r\n  };\r\n\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>Hexadecimal</Form.Label>\r\n      <Form.Control\r\n        type=\"text\"\r\n        placeholder=\"Enter hexadecimal number\"\r\n        value={calculateHex(baseValue)}\r\n        onInput={(e) => changeHandler(e)}\r\n      />\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nexport default HexInput;\r\n","import { Container, Jumbotron } from \"react-bootstrap\";\nimport BinaryInput from \"./BinaryInput\";\nimport DecimalInput from \"./DecimalInput\";\nimport HexInput from \"./HexInput\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [baseValue, setBaseValue] = useState();\n\n  const updateBaseValue = (value) => {\n    setBaseValue(value);\n  };\n\n  return (\n    <Container className=\"mt-5\">\n      <Jumbotron>\n        <h1>Base Calculator</h1>\n        <DecimalInput baseValue={baseValue} updateBaseValue={updateBaseValue} />\n        <BinaryInput baseValue={baseValue} updateBaseValue={updateBaseValue} />\n        <HexInput baseValue={baseValue} updateBaseValue={updateBaseValue} />\n      </Jumbotron>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nimport './bootstrap.min.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}